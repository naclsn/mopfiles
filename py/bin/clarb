#!/usr/bin/env python3
import argparse

p = argparse.ArgumentParser(description="""
    scan file, look for /^class <name>/ and make inheritance tree;
    expect Python, only top-level classes (AST-based);
    result is dot on standard output""")
p.add_argument('file', type=argparse.FileType('r'))
args = p.parse_args()

# graph construction {{{1
if True:
    import ast

dot = "digraph {" + "".join(
    "\n\t" + it.name + "".join(f"\n\t{it.name} -> {b.id}"
                               for b in it.bases if isinstance(b, ast.Name))
    for it in ast.parse(source=args.file.read()).body
    if isinstance(it, ast.ClassDef)) + "\n}"

args.file.close()
print(dot)

# visualisation {{{1
try:
    import gi
    import xdot

    gi.require_version('Gtk', '3.0')
    from gi.repository import Gtk

    win = xdot.ui.DotWindow()
    win.set_dotcode(dot.encode())
    win.connect('destroy', Gtk.main_quit)
    win.show()
    Gtk.main()

except Exception:
    print("# pip install xdot (and what its deps) for window")
