#!/usr/bin/env perl
use strict;
use warnings;
use HTTP::Tiny;
use JSON::PP;

my $srv = '';
my $pat = '';

if (!@ARGV || grep { '-h' eq $_ } @ARGV) {
    die <<USAGE;
Usage: $0 <repo> [<mr>]

    with <repo> often like <group>/<proj>
     and <mr> a MR number, lists them if absent

USAGE
}

my $proj = $ARGV[0]; $proj =~ s/([^0-9A-Za-z])/sprintf('%%%2x', ord($1))/ge;

if (@ARGV < 2) {
    my $res = HTTP::Tiny->new->get("https://$srv/api/v4/projects/$proj/merge_requests/?state=opened&private_token=$pat");
    if (!$res->{success}) {
        die "HTTP GET error: $res->{status} $res->{reason}\n";
    }

    my $data = decode_json($res->{content});
    foreach my $it (@$data) {
        print "$it->{iid}:\t\e[1m$it->{title}\e[m\n\t($it->{source_branch} -> $it->{target_branch})\n";
    }
    exit;
}

my $mr = $ARGV[1];

my $res = HTTP::Tiny->new->get("https://$srv/api/v4/projects/$proj/merge_requests/$mr/notes?private_token=$pat");
if (!$res->{success}) {
    die "HTTP GET error: $res->{status} $res->{reason}\n";
}

my $data = decode_json($res->{content});
for (my $k = @$data-1; $k >= 0; $k--) {
    my $it = $data->[$k];
    my $pos = $it->{position};
    if ($pos) {
        print "$pos->{new_path}|$pos->{new_line}| $it->{body}\n\n";
    }
}
