#!/usr/bin/env perl
use strict;
use warnings;
use HTTP::Tiny;
use JSON::PP;

my $srv = '';
my $pat = '';

die <<USAGE unless grep {!/^-h$/} @ARGV;
Usage: $0 <repo> [<mr>]

    with <repo> often like <group>/<proj>
     and <mr> a MR number, lists them if absent

USAGE

my $proj = $ARGV[0]; $proj =~ s/([^0-9A-Za-z])/sprintf('%%%2x', ord($1))/erg;

if (@ARGV < 2) {
    my $res = HTTP::Tiny->new->get("https://$srv/api/v4/projects/$proj/merge_requests/?state=opened&private_token=$pat");
    die "HTTP GET error: $res->{status} $res->{reason}\n" unless $res->{success};
    my $data = decode_json($res->{content});

    my $lineup_arrw = (sort map {length "$_->{iid}  $_->{title}  $_->{source_branch}"} @$data)[-1];
    for (@$data) {
        my $arrw = $lineup_arrw - (length "$_->{iid}  $_->{title}  $_->{source_branch}");
        printf "$_->{iid}: \e[1m$_->{title}\e[m %${arrw}s($_->{source_branch} -> $_->{target_branch})\n", ''
    }
    exit
}

my $mr = $ARGV[1];

my $res = HTTP::Tiny->new->get("https://$srv/api/v4/projects/$proj/merge_requests/$mr/notes?private_token=$pat");
die "HTTP GET error: $res->{status} $res->{reason}\n" unless $res->{success};
my $data = decode_json($res->{content});

for (reverse @$data) {
    my $pos = $_->{position};
    if ($pos) {
        my $line = $pos->{new_line} || 1;
        my $range = $pos->{line_range} ? "($pos->{line_range}{start}{new_line}-$pos->{line_range}{end}{new_line}) " : '';
        print "$pos->{new_path}|$line| $range$_->{body}\n\n"
    }
}
