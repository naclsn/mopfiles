#!/usr/bin/env python3
import argparse

p = argparse.ArgumentParser(description="""
    use pip and a requirement.txt file to make a dependency tree;
    result is dot on standard output""")
p.add_argument('file', type=argparse.FileType('r'))
args = p.parse_args()

# graph construction {{{1
if True:
    from tempfile import NamedTemporaryFile as file
    import subprocess
    import json
    import os

with file('w') as req, file() as rep:
    for line in args.file.readlines():
        line = line.strip()
        if line.startswith('-r'):
            path = line[2:].strip()
            if not path.startswith('/'):
                line = '-r' + os.getcwd() + '/' + path
        req.write(line + '\n')
    req.flush()
    args.file.close()

    subprocess.run([
        "pip",
        "install",
        "-qqqqqqq",
        "--dry-run",
        "--ignore-installed",
        "--report",
        rep.name,
        "-r",
        req.name,
    ]).check_returncode()

    res = json.load(rep)
# $.install[*].metadata.{name, requires_dist}


def unpack(name: str, requires_dist: list[str] | None = None, **_):

    def extract(req: str) -> str:
        for k, c in enumerate(req):
            if not c.isalnum() and c not in '_-':
                return req[:k]
        return req

    return f'"{name}"' + ''.join(f'\n\t"{name}" -> "{extract(it)}"'
                                 for it in requires_dist or [])


dot = "digraph {\n\t" + "\n\t".join(
    unpack(**package['metadata']) for package in res['install']) + "\n}"

print(dot)

# visualisation {{{1
try:
    import gi
    import xdot

    gi.require_version('Gtk', '3.0')
    from gi.repository import Gtk

    win = xdot.ui.DotWindow()
    win.set_dotcode(dot.encode())
    win.connect('destroy', Gtk.main_quit)
    win.show()
    Gtk.main()

except Exception:
    print("# pip install xdot (and what its deps) for window")
