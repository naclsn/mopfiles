#!/usr/bin/env python3
import argparse

p = argparse.ArgumentParser(description="""
    scan file, look for /^(class|(async )?def) <name>/ and make call tree;
    expect Python, only top-level functions (startswith-based);
    result is dot on standard output""")
p.add_argument('file', type=argparse.FileType('r'))
args = p.parse_args()

# graph construction {{{1
dot = "digraph {"

lines = [args.file.readlines()]  # type: list[str]
args.file.close()

name_lines, names = zip(
    *[(lnum,
       line.split(None, 2 if 'a' == line[0] else 1)[-1].split('(')[0].strip())
      for lnum, line in enumerate(lines)
      if any(map(line.startswith, ['class', 'async', 'def']))])

cur = -1
for lnum, line in enumerate(lines):
    if lnum in name_lines:
        dot += "\n\t" + names[cur + 1]
        cur += 1
        continue
    if cur < 0:
        continue
    for used in names:
        parts = line.split(used)
        if 1 == len(parts):
            continue
        for k in range(len(parts) - 1):
            a, b = parts[k][-1:], parts[k + 1][:1]
            if a.isalnum() or '_' == a or b.isalnum() or '_' == b:
                break
        else:
            dot += "\n\t" + names[cur] + " -> " + used

dot += "\n}"

print(dot)

# visualisation {{{1
try:
    import gi
    import xdot

    gi.require_version('Gtk', '3.0')
    from gi.repository import Gtk

    win = xdot.ui.DotWindow()
    win.set_dotcode(dot.encode())
    win.connect('destroy', Gtk.main_quit)
    win.show()
    Gtk.main()

except Exception:
    print("# pip install xdot (and what its deps) for window")
