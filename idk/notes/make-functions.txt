I wanna do something about that for vim (like a K for ft=makefile

$(subst from,to,text)
    Replace from with to in text.

$(patsubst pattern,replacement,text)
    Replace words matching pattern with replacement in text.

$(strip string)
    Remove excess whitespace characters from string.

$(findstring find,text)
    Locate find in text.

$(filter pattern…,text)
    Select words in text that match one of the pattern words.

$(filter-out pattern…,text)
    Select words in text that do not match any of the pattern words.

$(sort list)
    Sort the words in list lexicographically, removing duplicates.

$(word n,text)
    Extract the nth word (one-origin) of text.

$(words text)
    Count the number of words in text.

$(wordlist s,e,text)
    Returns the list of words in text from s to e.

$(firstword names…)
    Extract the first word of names.

$(lastword names…)
    Extract the last word of names.

$(dir names…)
    Extract the directory part of each file name.

$(notdir names…)
    Extract the non-directory part of each file name.

$(suffix names…)
    Extract the suffix (the last ‘.’ and following characters) of each file name.

$(basename names…)
    Extract the base name (name without suffix) of each file name.

$(addsuffix suffix,names…)
    Append suffix to each word in names.

$(addprefix prefix,names…)
    Prepend prefix to each word in names.

$(join list1,list2)
    Join two parallel lists of words.

$(wildcard pattern…)
    Find file names matching a shell file name pattern (not a ‘%’ pattern).

$(realpath names…)
    For each file name in names, expand to an absolute name that does not contain any ., .., nor symlinks.

$(abspath names…)
    For each file name in names, expand to an absolute name that does not contain any . or .. components, but preserves symlinks.

$(error text…)
    When this function is evaluated, make generates a fatal error with the message text.

$(warning text…)
    When this function is evaluated, make generates a warning with the message text.

$(shell command)
    Execute a shell command and return its output.

$(origin variable)
    Return a string describing how the make variable variable was defined.

$(flavor variable)
    Return a string describing the flavor of the make variable variable.

$(let var [var ...],words,text)
    Evaluate text with the vars bound to the words in words.

$(foreach var,words,text)
    Evaluate text with var bound to each word in words, and concatenate the results.

$(if condition,then-part[,else-part])
    Evaluate the condition condition; if it’s non-empty substitute the expansion of the then-part otherwise substitute the expansion of the else-part.

$(or condition1[,condition2[,condition3…]])
    Evaluate each condition conditionN one at a time; substitute the first non-empty expansion. If all expansions are empty, substitute the empty string.

$(and condition1[,condition2[,condition3…]])
    Evaluate each condition conditionN one at a time; if any expansion results in the empty string substitute the empty string. If all expansions result in a non-empty string, substitute the expansion of the last condition.

$(intcmp lhs,rhs[,lt-part[,eq-part[,gt-part]]])
    Compare lhs and rhs numerically; substitute the expansion of lt-part, eq-part, or gt-part depending on whether the left-hand side is less-than, equal-to, or greater-than the right-hand side, respectively.

$(call var,param,…)
    Evaluate the variable var replacing any references to $(1), $(2) with the first, second, etc. param values.

$(eval text)
    Evaluate text then read the results as makefile commands. Expands to the empty string.

$(file op filename,text)
    Expand the arguments, then open the file filename using mode op and write text to that file.

$(value var)
    Evaluates to the contents of the variable var, with no expansion performed on it.
